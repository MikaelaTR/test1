@model AdvancedProjectMVC.Models.Channel

@{
    ViewData["Title"] = Model.ChannelName;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Details</h1>

<div>
    <h4>Channel</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-3 col-md-2">
            @Html.DisplayNameFor(model => model.ChannelName)
        </dt>
        <dd class="col-sm-9 col-md-10">
            @Html.DisplayFor(model => model.ChannelName)
        </dd>
        <dt class="col-sm-3 col-md-2">
            @Html.DisplayNameFor(model => model.Server.ServerName)
        </dt>
        <dd class="col-sm-9 col-md-10">
            @Html.DisplayFor(model => model.Server.ServerName)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>

<div class="container chat-area">
    <div id="messagearea" class="row">
        <div><p>Joined as: <b id="username">@User.Identity?.Name</b></p></div>
        <hr />
            <div class="row">
                <div class="col-md-6 message-list">
                    <ul id="messageList" class="message-list">
                        @foreach(var item in Model.ChatMessages)
                        {
                            <li class="chat-message">
                                    @Html.DisplayFor(modelItem => item.ApplicationUser.UserName)
                                     says:  
                                    @Html.DisplayFor(modelItem => item.Content)
                            </li>
                        }
                    </ul>
                </div>
            </div>
        <hr />
        <div class="row chatbox">
            <div class="col-md-6">
                <textarea type="text" id="message" autocomplete="off" onkeypress="enterKeySendMessage(event)" class="chatbox-textarea"></textarea>
            </div>
            <div class="col-md-6">
                <input type="button" id="sendButton" value="Send" onclick="sendMessage(event)" class="chatbox-sendbutton" />
            </div>
        </div>
    </div>
</div>

<footer>
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
</footer>

<script>
    "use strict";
    const connection = new signalR.HubConnectionBuilder().withUrl("/chathub").configureLogging(signalR.LogLevel.Trace).build();
    var username = document.getElementById("username").innerHTML;
    var channelId = @Model.Id;
    var groupName = "@Model.ChannelName";

    //Disable send button until connection is established
    document.getElementById("sendButton").disabled = true;

    window.scrollTo(0, document.body.scrollHeight); //Scroll to bottom on load

    connection.on("ReceiveMessage", function (user, message) {
        console.log("hey! Listen!");
        var msg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/</g, "&gt;");
        var encodedMsg = user + " says: " + msg;
        var li = document.createElement("li")
        li.textContent = encodedMsg;
        li.classList.add("chat-message");
        document.getElementById("messageList").appendChild(li);
        console.log("Over here!");
        window.scrollTo(0, document.body.scrollHeight); //Scroll to bottom of page when new message received
    });

    connection.start().then(function () {
        document.getElementById("sendButton").disabled = false;
        addToGroup(groupName);
        //console.log("Connection: " + connection.invoke("GetConnectionId").toString() + "\n")
        console.log("Username: " + username + "\n");
        console.log("Channel: " + channelId + "\n");
    }).catch(function (err) {
        return console.error(err.toString());
    });

    function addToGroup(groupName) {
        connection.invoke("AddToGroup", groupName).then(function () {
            console.log(username + " has joined " + groupName + ".");
        }).catch(function (err) {
            return console.error(err.toString());
        });
    }

    function sendMessage(e) {
        var message = document.getElementById("message").value;
        if (message && message !== "\n") { //Don't send empty message
            connection.invoke("SendMessageToGroup", username, message, groupName, channelId).then(function () {
                document.getElementById("message").value = "";
            }).catch(function (err) {
                document.getElementById("message").value = "";
                return console.error(err.toString());
            });
            event.preventDefault();
        }
    }
    function enterKeySendMessage(e) { //Send message if enter key hit, and not holding shift
        if (e.code === "Enter" && !e.shiftKey) {
            sendMessage(e);
        }
    }

    //Resizes the text area to fit content
    const textArea = document.getElementById("message");
    textArea.style.cssText = `height: ${textArea.scrollHeight}px; overflow-y hidden`;
    textArea.addEventListener("input", function () {
        this.style.height = "auto";
        this.style.height = `${this.scrollHeight}px`;
    });

</script>
